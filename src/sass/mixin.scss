$media_queries : (
    'mobile'    : "only screen and (max-width: 667px)",
    'tablet'    : "only screen and (min-width: 668px) and (max-width: 1024px)",
    'desktop'   : "only screen and (min-width: (1025px))",
    'retina2'   : "only screen and (-webkit-min-device-pixel-ratio: 2) and (min-resolution: 192dpi)",
    'retina3'   : "only screen and (-webkit-min-device-pixel-ratio: 3) and (min-resolution: 288dpi)",
    'landscape' : "screen and (orientation:landscape) ",
    'portrait'  : "screen and (orientation:portrait) "
);

@mixin for_breakpoint($breakpoints) {
    $conditions : ();
    @each $breakpoint in $breakpoints {
        // If the key exists in the map
        $conditions: append(
            $conditions,
            #{inspect(map-get($media_queries, $breakpoint))},
            comma
        );
    }

    @media #{$conditions} {
        @content;
    }

}

// Set the grid defaults
// -----------------------------------------------------------------------------
$column-count: 12 !default;
$gutter-size: 0.5rem !default;
$medium: 40em; //640px
$large: 64em; //1024px

// Find the width of 1 column, based upon the column count
// -----------------------------------------------------------------------------
@function find_column_width($columns: $column-count) {
  $column-width: (100% / $columns);

  @return $column-width;
}

// Create a grid container to house the columns
// -----------------------------------------------------------------------------
@mixin grid($nested: false, $gutters: true) {
  display: flex;
  flex-wrap: wrap;
  box-sizing: border-box;

  @if $nested {
    flex: 0 1 auto;
  }

  @if $gutters {
    > * {
      padding-left: $gutter-size;
      padding-right: $gutter-size;
      box-sizing: border-box;
    }
  }
}

// Create a column of the grid
// -----------------------------------------------------------------------------
@mixin column($columns: 0, $md: null, $lg: null) {
  $width: find_column_width();
  $flex-basis: $width * $columns;

  // Setting $columns = 0 will set the column to be auto width and fill available space
  @if ($columns == 0) {
    flex: 1 0 0;
    width: auto;
  } @else {
    flex: 0 0 $flex-basis;
    min-width: $flex-basis;
  }

  // Set the column width on medium screens
  @if ($md != null) {
    @media screen and (min-width: $medium) {
      $flex-basis: $width * $md;
      @if ($md == 0) {
        flex: 1 0 0;
        width: auto;
      } @else {
        flex: 0 0 $flex-basis;
        min-width: $flex-basis;
      }
    }
  }

  // Set the column width on large screens
  @if ($lg != null) {
    @media screen and (min-width: $large) {
      $flex-basis: $width * $lg;
      @if ($lg == 0) {
        flex: 1 0 0;
        width: auto;
      } @else {
        flex: 0 0 $flex-basis;
        min-width: $flex-basis;
      }
    }
  }
}

// Create a column for a specific breakpoint
// Never needed if purely using grid as mixins
// -----------------------------------------------------------------------------
@mixin mq-column($breakpoint: 'md', $columns: 0) {
  $width: find_column_width();
  $flex-basis: $width * $columns;

  @if ($breakpoint == 'lg') {
    @media screen and (min-width: $large) {
      @if ($columns == 0) {
        flex: 1 0 0;
        width: auto;
      } @else {
        flex: 0 0 $flex-basis;
        min-width: $flex-basis;
      }
    }
  } @else {
    @media screen and (min-width: $medium) {
      @if ($columns == 0) {
        flex: 1 0 0;
        width: auto;
      } @else {
        flex: 0 0 $flex-basis;
        min-width: $flex-basis;
      }
    }
  }
}

.row {
  @include grid();
}

.column {
  @include column();
}

// Make some base columns
@for $i from 1 through 12 {
  .sm-col-#{$i} {
    @include column($i);
  }
}

// Make some base columns for medium
@for $i from 1 through 12 {
  .md-col-#{$i} {
    @include mq-column('md', $i);
  }
}

// Make some base columns for large
@for $i from 1 through 12 {
  .lg-col-#{$i} {
    @include mq-column('lg', $i);
  }
}


//padding, margin spacer vars
$spacer: 16;
$max: 10;
$zero: 0px;
$one: unquote( ( $spacer * 0.25  ) + 'px' );
$two: unquote( ( $spacer * 0.5  ) + 'px' );
$three: unquote( ( $spacer ) + 'px' );
$four: unquote( ( $spacer * 1.5 ) + 'px' );
$five: unquote( ( $spacer * 3 ) + 'px' );
$six: unquote(($spacer * 4) + 'px');
$seven: unquote(($spacer * 5) + 'px');
$eight: unquote(($spacer * 6) + 'px');
$nine: unquote(($spacer * 7) + 'px');

$spaces: ($zero, $one, $two, $three, $four, $five, $six, $seven, $eight, $nine); // Adjust this to include the pixel amounts you need.
$sides: (x, y, all, top, bottom, left, right); // Leave this variable alone
$i: 0;
@each $space in $spaces {
    @each $side in $sides {
        @if $side == all {
            .pa-#{$i} {
                padding: #{$space} #{$space} !important;
            }
        } @else if $side == x {
            .px-#{$i} {
                padding-left: #{$space} !important;
                padding-right: #{$space} !important;
            }
        } @else if $side == y {
            .py-#{$i} {
                padding-top: #{$space} !important;
                padding-bottom: #{$space} !important;
            }
        } @else {
            .p#{str-slice($side, 0, 1)}-#{$i} {
                padding-#{$side}: #{$space} !important;
            }
        }
    }
    @each $side in $sides {
        @if $side == all {
            .ma-#{$i} {
                margin: #{$space} #{$space} !important;
            }
        } @else if $side == x {
            .mx-#{$i} {
                margin-left: #{$space} !important;
                margin-right: #{$space} !important;
            }
        } @else if $side == y {
            .my-#{$i} {
                margin-top: #{$space} !important;
                margin-bottom: #{$space} !important;
            }
        } @else {
            .m#{str-slice($side, 0, 1)}-#{$i} {
                margin-#{$side}: #{$space} !important;
            }
        }
    }
    $i: $i + 1;
}
